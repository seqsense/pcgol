package pc

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/seqsense/pcgol/mat"
)

func TestUnmarshal(t *testing.T) {
	type point struct {
		x, y, z float32
		label   uint32
	}

	testCases := map[string]struct {
		pcd      []byte
		expected []point
	}{
		"Ascii": {
			pcd: []byte(`# .PCD v0.7 - Point Cloud Data file format
VERSION 0.7
FIELDS x y z xyz label
SIZE 4 4 4 4 4
TYPE F F F F U
COUNT 1 1 1 3 1
WIDTH 5
HEIGHT 1
VIEWPOINT 0 0 0 1 0 0 0
POINTS 5
DATA ascii
0.352000 -0.151000 -0.106000 0.352000 -0.151000 -0.106000 0
-0.473000 0.292000 -0.731000 -0.473000 0.292000 -0.731000 0
0.441000 -0.734000 0.854000 0.441000 -0.734000 0.854000 2
-0.460000 -0.277000 -0.916000 -0.460000 -0.277000 -0.916000 1
0.968000 0.512000 -0.998000 0.968000 0.512000 -0.998000 1
`),
			expected: []point{
				{0.352, -0.151, -0.106, 0},
				{-0.473, 0.292, -0.731, 0},
				{0.441, -0.734, 0.854, 2},
				{-0.46, -0.277, -0.916, 1},
				{0.968, 0.512, -0.998, 1},
			},
		},
		"Binary": {
			pcd: []byte{
				0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x20, 0x30, 0x2e, 0x37, 0x0a, 0x46, 0x49, 0x45, 0x4c,
				0x44, 0x53, 0x20, 0x78, 0x20, 0x79, 0x20, 0x7a, 0x20, 0x78, 0x79, 0x7a, 0x20, 0x6c, 0x61, 0x62,
				0x65, 0x6c, 0x0a, 0x53, 0x49, 0x5a, 0x45, 0x20, 0x34, 0x20, 0x34, 0x20, 0x34, 0x20, 0x34, 0x20,
				0x34, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x20, 0x46, 0x20, 0x46, 0x20, 0x46, 0x20, 0x46, 0x20, 0x55,
				0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x20, 0x31, 0x20, 0x31, 0x20, 0x31, 0x20, 0x33, 0x20, 0x31,
				0x0a, 0x57, 0x49, 0x44, 0x54, 0x48, 0x20, 0x35, 0x0a, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x20,
				0x31, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x20, 0x30, 0x2e, 0x30, 0x30,
				0x30, 0x30, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30,
				0x20, 0x31, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30,
				0x2e, 0x30, 0x30, 0x30, 0x30, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x0a, 0x50, 0x4f, 0x49,
				0x4e, 0x54, 0x53, 0x20, 0x35, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x20, 0x62, 0x69, 0x6e, 0x61, 0x72,
				0x79, 0x0a, 0x58, 0x39, 0xb4, 0x3e, 0xbe, 0x9f, 0x1a, 0xbe, 0x87, 0x16, 0xd9, 0xbd, 0x58, 0x39,
				0xb4, 0x3e, 0xbe, 0x9f, 0x1a, 0xbe, 0x87, 0x16, 0xd9, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x2d,
				0xf2, 0xbe, 0x06, 0x81, 0x95, 0x3e, 0xd1, 0x22, 0x3b, 0xbf, 0x0e, 0x2d, 0xf2, 0xbe, 0x06, 0x81,
				0x95, 0x3e, 0xd1, 0x22, 0x3b, 0xbf, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xca, 0xe1, 0x3e, 0x6d, 0xe7,
				0x3b, 0xbf, 0xbe, 0x9f, 0x5a, 0x3f, 0xc1, 0xca, 0xe1, 0x3e, 0x6d, 0xe7, 0x3b, 0xbf, 0xbe, 0x9f,
				0x5a, 0x3f, 0x02, 0x00, 0x00, 0x00, 0x1f, 0x85, 0xeb, 0xbe, 0xf2, 0xd2, 0x8d, 0xbe, 0xfa, 0x7e,
				0x6a, 0xbf, 0x1f, 0x85, 0xeb, 0xbe, 0xf2, 0xd2, 0x8d, 0xbe, 0xfa, 0x7e, 0x6a, 0xbf, 0x01, 0x00,
				0x00, 0x00, 0xd9, 0xce, 0x77, 0x3f, 0x6f, 0x12, 0x03, 0x3f, 0xee, 0x7c, 0x7f, 0xbf, 0xd9, 0xce,
				0x77, 0x3f, 0x6f, 0x12, 0x03, 0x3f, 0xee, 0x7c, 0x7f, 0xbf, 0x01, 0x00, 0x00, 0x00,
			},
			expected: []point{
				{0.352, -0.151, -0.106, 0},
				{-0.473, 0.292, -0.731, 0},
				{0.441, -0.734, 0.854, 2},
				{-0.46, -0.277, -0.916, 1},
				{0.968, 0.512, -0.998, 1},
			},
		},
		"BinaryCompressed": {
			pcd: []byte{
				0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x20, 0x30, 0x2e, 0x37, 0x0a, 0x46, 0x49, 0x45, 0x4c,
				0x44, 0x53, 0x20, 0x78, 0x20, 0x79, 0x20, 0x7a, 0x20, 0x78, 0x79, 0x7a, 0x20, 0x6c, 0x61, 0x62,
				0x65, 0x6c, 0x0a, 0x53, 0x49, 0x5a, 0x45, 0x20, 0x34, 0x20, 0x34, 0x20, 0x34, 0x20, 0x34, 0x20,
				0x34, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x20, 0x46, 0x20, 0x46, 0x20, 0x46, 0x20, 0x46, 0x20, 0x55,
				0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x20, 0x31, 0x20, 0x31, 0x20, 0x31, 0x20, 0x33, 0x20, 0x31,
				0x0a, 0x57, 0x49, 0x44, 0x54, 0x48, 0x20, 0x35, 0x0a, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x20,
				0x31, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x20, 0x30, 0x20, 0x30, 0x20,
				0x30, 0x20, 0x31, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0a, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53,
				0x20, 0x35, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x20, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63,
				0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x0a, 0x6c, 0x00, 0x00, 0x00, 0x8c, 0x00,
				0x00, 0x00, 0x1f, 0x58, 0x39, 0xb4, 0x3e, 0x0e, 0x2d, 0xf2, 0xbe, 0xc1, 0xca, 0xe1, 0x3e, 0x1f,
				0x85, 0xeb, 0xbe, 0xd9, 0xce, 0x77, 0x3f, 0xbe, 0x9f, 0x1a, 0xbe, 0x06, 0x81, 0x95, 0x3e, 0x6d,
				0xe7, 0x3b, 0xbf, 0x1c, 0xf2, 0xd2, 0x8d, 0xbe, 0x6f, 0x12, 0x03, 0x3f, 0x87, 0x16, 0xd9, 0xbd,
				0xd1, 0x22, 0x3b, 0xbf, 0xbe, 0x9f, 0x5a, 0x3f, 0xfa, 0x7e, 0x6a, 0xbf, 0xee, 0x7c, 0x7f, 0xbf,
				0x58, 0x20, 0x3b, 0x40, 0x2b, 0x40, 0x1b, 0x40, 0x43, 0x40, 0x33, 0x40, 0x23, 0x40, 0x4b, 0x40,
				0x3b, 0x40, 0x2b, 0x40, 0x53, 0x40, 0x43, 0x40, 0x33, 0x40, 0x5b, 0x40, 0x4b, 0x40, 0x3b, 0x00,
				0x00, 0xa0, 0x00, 0x00, 0x02, 0x20, 0x07, 0x00, 0x01, 0x60, 0x03, 0x01, 0x00, 0x00,
			},
			expected: []point{
				{0.352, -0.151, -0.106, 0},
				{-0.473, 0.292, -0.731, 0},
				{0.441, -0.734, 0.854, 2},
				{-0.46, -0.277, -0.916, 1},
				{0.968, 0.512, -0.998, 1},
			},
		},
	}

	for name, tt := range testCases {
		tt := tt
		t.Run(name, func(t *testing.T) {
			pp, err := Unmarshal(bytes.NewReader(tt.pcd))
			if err != nil {
				t.Fatal(err)
			}

			/*
				bb := bytes.NewBuffer(nil)
				Marshal(pp, bb)
				t.Logf("%#v", bb.Bytes())
			*/

			vt, err := pp.Vec3Iterator()
			if err != nil {
				t.Fatal(err)
			}

			lt, err := pp.Uint32Iterator("label")
			if err != nil {
				t.Fatal(err)
			}

			for i, e := range tt.expected {
				p := vt.Vec3()
				ep := mat.Vec3{e.x, e.y, e.z}
				if !p.Equal(ep) {
					t.Errorf("Point %d, expected vector %v, got %v", i, ep, p)
				}
				l := lt.Uint32()
				if l != e.label {
					t.Errorf("Point %d, expected label: %d, got: %d", i, e.label, l)
				}
				vt.Incr()
				lt.Incr()
			}
		})
	}
}

func TestMarshal(t *testing.T) {
	t.Run("CheckViewPoint", func(t *testing.T) {
		testCases := map[string]struct {
			pp             *PointCloud
			expectedHeader PointCloudHeader
		}{
			"NoViewpointProvided": {
				pp: &PointCloud{
					PointCloudHeader: PointCloudHeader{
						Fields: []string{"x", "y", "z"},
						Size:   []int{4, 4, 4},
						Count:  []int{1, 1, 1},
						Type:   []string{"F", "F", "F"},
						Width:  3,
						Height: 1,
					},
					Points: 3,
					Data:   make([]byte, 3*4*3),
				},
				expectedHeader: PointCloudHeader{
					Fields:    []string{"x", "y", "z"},
					Size:      []int{4, 4, 4},
					Count:     []int{1, 1, 1},
					Type:      []string{"F", "F", "F"},
					Width:     3,
					Height:    1,
					Viewpoint: []float32{0, 0, 0, 1, 0, 0, 0},
				},
			},
			"ViewpointProvided": {
				pp: &PointCloud{
					PointCloudHeader: PointCloudHeader{
						Fields:    []string{"x", "y", "z"},
						Size:      []int{4, 4, 4},
						Count:     []int{1, 1, 1},
						Type:      []string{"F", "F", "F"},
						Width:     3,
						Height:    1,
						Viewpoint: []float32{1, 2, 3, -0.333, 0.003, 0.895, -0.298},
					},
					Points: 3,
					Data:   make([]byte, 3*4*3),
				},
				expectedHeader: PointCloudHeader{
					Fields:    []string{"x", "y", "z"},
					Size:      []int{4, 4, 4},
					Count:     []int{1, 1, 1},
					Type:      []string{"F", "F", "F"},
					Width:     3,
					Height:    1,
					Viewpoint: []float32{1, 2, 3, -0.333, 0.003, 0.895, -0.298},
				},
			},
		}

		for name, tt := range testCases {
			tt := tt
			t.Run(name, func(t *testing.T) {
				obuf := &bytes.Buffer{}
				err := Marshal(tt.pp, obuf)
				if err != nil {
					t.Fatal(err)
				}
				pp2, err := Unmarshal(obuf)
				if err != nil {
					t.Fatal(err)
				}
				if !reflect.DeepEqual(tt.expectedHeader, pp2.PointCloudHeader) {
					t.Errorf("Expected %v, got %v", tt.expectedHeader, pp2.PointCloudHeader)
				}
			})
		}
	})
}
